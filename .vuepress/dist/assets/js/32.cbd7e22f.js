(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{320:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"keep-alive原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive原理","aria-hidden":"true"}},[a._v("#")]),a._v(" keep-alive原理")]),e("h3",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性","aria-hidden":"true"}},[a._v("#")]),a._v(" 特性")]),e("p",[a._v("keep-alive 是 Vue.js 的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。")]),e("p",[a._v("它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。")]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token operator"}},[a._v("<")]),a._v("keep"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("alive exclude"),e("span",{attrs:{class:"token operator"}},[a._v("=")]),e("span",{attrs:{class:"token string"}},[a._v('"a"')]),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  "),e("span",{attrs:{class:"token operator"}},[a._v("<")]),a._v("component"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),e("span",{attrs:{class:"token operator"}},[a._v("<")]),e("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("component"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),e("span",{attrs:{class:"token operator"}},[a._v("<")]),e("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("keep"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("alive"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),e("span",{attrs:{class:"token operator"}},[a._v("<")]),a._v("keep"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("alive include"),e("span",{attrs:{class:"token operator"}},[a._v("=")]),e("span",{attrs:{class:"token string"}},[a._v('"a"')]),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  "),e("span",{attrs:{class:"token operator"}},[a._v("<")]),a._v("component"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),e("span",{attrs:{class:"token operator"}},[a._v("<")]),e("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("component"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),e("span",{attrs:{class:"token operator"}},[a._v("<")]),e("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("keep"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("alive"),e("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),e("h3",{attrs:{id:"生命钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命钩子","aria-hidden":"true"}},[a._v("#")]),a._v(" 生命钩子")]),e("p",[a._v("keep-alive 提供了两个生命钩子，分别是 activated 与 deactivated。")]),e("p",[a._v("因为 keep-alive 会将组件保存在内存中，并不会销毁以及重新创建，所以不会重新调用组件的 created 等方法，需要用 activated 与 deactivated 这两个生命钩子来得知当前组件是否处于活动状态。")]),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 原理")]),e("p",[a._v("created 钩子会创建一个 cache 对象，用来作为缓存容器，保存 vnode 节点。\n遍历 cache 中的所有项，如果不符合 filter 指定的规则的话，则会执行 pruneCacheEntry。pruneCacheEntry 则会调用组件实例的$destroy 方法来将组件销毁。")]),e("p",[a._v("Vue.js 内部将 DOM 节点抽象成了一个个的VNode 节点，keep-alive 组件的缓存也是基于 VNode 节点的而不是直接存储 DOM 结构。它将满足条件（ pruneCache 与 pruneCache ）的组件在 cache 对象中缓存起来，在需要重新渲染的时候再将 vnode 节点从 cache 对象中取出并渲染。")])])}],!1,null,null,null);t.default=r.exports}}]);